// @generated by protobuf-ts 2.9.1 with parameter server_grpc1
// @generated from protobuf file "cat.proto" (package "spec", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { UpdateCatFieldRequest } from "./cat";
import { CreateCatResponse } from "./cat";
import { CreateCatRequest } from "./cat";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.Catter
 */
export interface ICatter extends grpc.UntypedServiceImplementation {
    /**
     * RegisterCat creates a cat by CreateCatRequest data
     *
     * @generated from protobuf rpc: RegisterCat(spec.CreateCatRequest) returns (spec.CreateCatResponse);
     */
    registerCat: grpc.handleUnaryCall<CreateCatRequest, CreateCatResponse>;
    /**
     * @generated from protobuf rpc: UpdateCatName(spec.UpdateCatFieldRequest) returns (google.protobuf.Empty);
     */
    updateCatName: grpc.handleUnaryCall<UpdateCatFieldRequest, Empty>;
    /**
     * @generated from protobuf rpc: UpdateCatBio(spec.UpdateCatFieldRequest) returns (google.protobuf.Empty);
     */
    updateCatBio: grpc.handleUnaryCall<UpdateCatFieldRequest, Empty>;
}
/**
 * @grpc/grpc-js definition for the protobuf service spec.Catter.
 *
 * Usage: Implement the interface ICatter and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: ICatter = ...
 * server.addService(catterDefinition, service);
 * ```
 */
export const catterDefinition: grpc.ServiceDefinition<ICatter> = {
    registerCat: {
        path: "/spec.Catter/RegisterCat",
        originalName: "RegisterCat",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateCatResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateCatRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateCatResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateCatRequest.toBinary(value))
    },
    updateCatName: {
        path: "/spec.Catter/UpdateCatName",
        originalName: "UpdateCatName",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Empty.fromBinary(bytes),
        requestDeserialize: bytes => UpdateCatFieldRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Empty.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdateCatFieldRequest.toBinary(value))
    },
    updateCatBio: {
        path: "/spec.Catter/UpdateCatBio",
        originalName: "UpdateCatBio",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => Empty.fromBinary(bytes),
        requestDeserialize: bytes => UpdateCatFieldRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(Empty.toBinary(value)),
        requestSerialize: value => Buffer.from(UpdateCatFieldRequest.toBinary(value))
    }
};
