// @generated by protobuf-ts 2.9.1 with parameter client_grpc1
// @generated from protobuf file "cat.proto" (package "spec", syntax proto3)
// tslint:disable
import { Catter } from "./cat";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { CreateCatResponse } from "./cat";
import type { CreateCatRequest } from "./cat";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.Catter
 */
export interface ICatterClient {
    /**
     * RegisterCat creates a cat by CreateCatRequest data
     *
     * @generated from protobuf rpc: RegisterCat(spec.CreateCatRequest) returns (spec.CreateCatResponse);
     */
    registerCat(input: CreateCatRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateCatResponse) => void): grpc.ClientUnaryCall;
    registerCat(input: CreateCatRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: CreateCatResponse) => void): grpc.ClientUnaryCall;
    registerCat(input: CreateCatRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateCatResponse) => void): grpc.ClientUnaryCall;
    registerCat(input: CreateCatRequest, callback: (err: grpc.ServiceError | null, value?: CreateCatResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service spec.Catter
 */
export class CatterClient extends grpc.Client implements ICatterClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * RegisterCat creates a cat by CreateCatRequest data
     *
     * @generated from protobuf rpc: RegisterCat(spec.CreateCatRequest) returns (spec.CreateCatResponse);
     */
    registerCat(input: CreateCatRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateCatResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateCatResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: CreateCatResponse) => void)): grpc.ClientUnaryCall {
        const method = Catter.methods[0];
        return this.makeUnaryRequest<CreateCatRequest, CreateCatResponse>(`/${Catter.typeName}/${method.name}`, (value: CreateCatRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): CreateCatResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
